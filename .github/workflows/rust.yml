name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            archive: zip
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz
          - target: x86_64-apple-darwin
            os: macos-15
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-15
            archive: tar.gz

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'x86_64-pc-windows-gnu' || matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]]; then
          sudo apt-get update
          sudo apt-get install -y gcc-mingw-w64-x86-64
        elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Get binary name
      id: binary
      run: |
        if [[ "${{ matrix.target }}" == *"windows"* ]]; then
          echo "name=$(basename $(find target/${{ matrix.target }}/release -name '*.exe' | head -1))" >> $GITHUB_OUTPUT
          echo "path=target/${{ matrix.target }}/release/$(basename $(find target/${{ matrix.target }}/release -name '*.exe' | head -1))" >> $GITHUB_OUTPUT
        else
          # Find executable files (not directories, not build artifacts)
          binary_path=$(find target/${{ matrix.target }}/release -maxdepth 1 -type f -executable ! -name "*.d" ! -name "*.rlib" | head -1)
          echo "name=$(basename $binary_path)" >> $GITHUB_OUTPUT
          echo "path=$binary_path" >> $GITHUB_OUTPUT
        fi

    - name: Create archive
      run: |
        mkdir -p dist
        if [[ "${{ matrix.archive }}" == "zip" ]]; then
          cp ${{ steps.binary.outputs.path }} dist/
          cp config.json dist/
          cd dist
          zip -r ../release-${{ matrix.target }}.zip .
        else
          cp ${{ steps.binary.outputs.path }} dist/
          cp config.json dist/
          cd dist
          tar -czf ../release-${{ matrix.target }}.tar.gz .
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.target }}
        path: release-${{ matrix.target }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag }}
        name: Release ${{ github.event.inputs.tag }}
        draft: false
        prerelease: false
        files: artifacts/*/release-*
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
