name: Build and Release ConvertiX

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: convertix-linux-amd64
            zip_name: convertix-linux-amd64.zip
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: convertix-linux-arm64
            zip_name: convertix-linux-arm64.zip
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact_name: convertix-windows-amd64.exe
            zip_name: convertix-windows-amd64.zip
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: convertix-macos-amd64
            zip_name: convertix-macos-amd64.zip
          # macOS ARM64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: convertix-macos-arm64
            zip_name: convertix-macos-arm64.zip

    steps:
    - uses: actions/checkout@v4

    # 安装 Rust 工具链
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        targets: ${{ matrix.target }}

    # 安装平台特定依赖
    - name: Install dependencies
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 qemu-user-static
        cargo install cross

    # 安装 Windows 平台依赖
    - name: Install Windows dependencies
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        choco install 7zip

    # 安装 macOS 依赖
    - name: Install macOS dependencies
      if: ${{ matrix.os == 'macos-latest' }}
      run: brew install gnu-tar

    # 编译
    - name: Build for ${{ matrix.target }}
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          if [[ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" || "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cargo build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    # 准备工件
    - name: Prepare artifacts
      run: |
        mkdir artifacts
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows 特定处理
          Copy-Item "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" -Destination artifacts/
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # macOS 特定处理
          cp "target/${{ matrix.target }}/release/convertix" "artifacts/${{ matrix.artifact_name }}"
        else
          # Linux 特定处理
          cp "target/${{ matrix.target }}/release/convertix" "artifacts/${{ matrix.artifact_name }}"
        fi
        cp config.json artifacts/
      shell: bash

    # 创建压缩包
    - name: Create archive
      run: |
        cd artifacts
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          # Windows 使用 7z
          7z a "../${{ matrix.zip_name }}" *
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          # macOS 使用 tar.gz
          tar -czf "../${{ matrix.zip_name }}" *
        else
          # Linux 使用 zip
          zip -r "../${{ matrix.zip_name }}" *
        fi
      shell: bash

    # 上传工件
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.zip_name }}
        path: ${{ matrix.zip_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag }}
        release_name: ConvertiX ${{ github.event.inputs.tag }}
        body: Automated release for ConvertiX ${{ github.event.inputs.tag }}
        draft: false
        prerelease: false

    - name: Upload Windows AMD64
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./convertix-windows-amd64.zip
        asset_name: convertix-windows-amd64.zip
        asset_content_type: application/zip

    - name: Upload Linux AMD64
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./convertix-linux-amd64.zip
        asset_name: convertix-linux-amd64.zip
        asset_content_type: application/zip

    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./convertix-linux-arm64.zip
        asset_name: convertix-linux-arm64.zip
        asset_content_type: application/zip

    - name: Upload macOS AMD64
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./convertix-macos-amd64.zip
        asset_name: convertix-macos-amd64.zip
        asset_content_type: application/zip

    - name: Upload macOS ARM64
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./convertix-macos-arm64.zip
        asset_name: convertix-macos-arm64.zip
        asset_content_type: application/zip
